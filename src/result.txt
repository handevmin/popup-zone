App.js
```
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Header from './components/Header';
import FloatingBar from './components/FloatingBar';
import MainPage from './pages/MainPage';
import SearchResultPage from './pages/SearchResultPage';
import PopupDetailPage from './pages/PopupDetailPage';
import FavoritePopupsPage from './pages/FavoritePopupsPage';
import LoginPage from './pages/LoginPage';
import MyPage from './pages/MyPage';
import PopupReportPage from './pages/PopupReportPage';
import AdminPage from './pages/AdminPage';
import PrivateRoute from './components/PrivateRoute';
import { AuthProvider } from './context/AuthContext';

function App() {
  return (
    <AuthProvider>
      <Router>
        <div className="App">
          <Header />
          <Routes>
            <Route path="/" element={<MainPage />} />
            <Route path="/search" element={<SearchResultPage />} />
            <Route path="/popup/:id" element={<PopupDetailPage />} />
            <Route path="/favorites" element={<PrivateRoute><FavoritePopupsPage /></PrivateRoute>} />
            <Route path="/login" element={<LoginPage />} />
            <Route path="/mypage" element={<PrivateRoute><MyPage /></PrivateRoute>} />
            <Route path="/popup-report" element={<PrivateRoute><PopupReportPage /></PrivateRoute>} />
            <Route path="/admin" element={<PrivateRoute adminOnly><AdminPage /></PrivateRoute>} />
          </Routes>
          <FloatingBar />
        </div>
      </Router>
    </AuthProvider>
  );
}

export default App;

```

index.js
```
import React from 'react';
import ReactDOM from 'react-dom/client';
import './styles/main.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


```

components\FloatingBar.js
```
import React from 'react';
import { Link } from 'react-router-dom';

const FloatingBar = () => {
  return (
    <div className="floating-bar">
      <Link to="/popup-report">팝업제보</Link>
      <Link to="/favorites">관심팝업</Link>
      <Link to="/login">로그인</Link>
      <button onClick={() => window.scrollTo({top: 0, behavior: 'smooth'})}>
        맨 위로
      </button>
    </div>
  );
};

export default FloatingBar;


```

components\Footer.js
```

```

components\Header.js
```
import React from 'react';
import { Link } from 'react-router-dom';
import SearchBar from './SearchBar';

const Header = () => {
  return (
    <header>
      <div className="header-content">
        <Link to="/" className="logo">
          <h1>Popup Zone</h1>
        </Link>
        <SearchBar />
        <nav>
          <Link to="/popup-report">팝업제보</Link>
          <Link to="/favorites">관심팝업</Link>
          <Link to="/login">로그인</Link>
        </nav>
      </div>
    </header>
  );
};

export default Header;

```

components\PopupCard.js
```
import React from 'react';
import { Link } from 'react-router-dom';

const PopupCard = ({ popup }) => {
  return (
    <div className="popup-card">
      <img src={popup.image || '/images/default-popup.jpg'} alt={popup.title} />
      <div className="popup-info">
        <h3>{popup.title}</h3>
        <p className="location">{popup.location}</p>
        <p className="date">{popup.date}</p>
        <Link to={`/popup/${popup.id}`} className="details-button">자세히 보기</Link>
      </div>
    </div>
  );
};

export default PopupCard;

```

components\PopupSlider.js
```
import React from 'react';
import Slider from 'react-slick';
import 'slick-carousel/slick/slick.css';
import 'slick-carousel/slick/slick-theme.css';
import { Link } from 'react-router-dom';

const PopupSlider = ({ popups }) => {
  const settings = {
    dots: true,
    infinite: true,
    speed: 500,
    slidesToShow: 1,
    slidesToScroll: 1,
    autoplay: true,
    autoplaySpeed: 3000,
  };

  return (
    <div className="popup-slider">
      <Slider {...settings}>
        {popups.map((popup) => (
          <div key={popup.id} className="slider-item">
            <img src={popup.image || '/images/default-popup.jpg'} alt={popup.title} />
            <div className="slider-info">
              <h3>{popup.title}</h3>
              <p>{popup.location}</p>
              <p>{popup.date}</p>
              <Link to={`/popup/${popup.id}`} className="slider-button">자세히 보기</Link>
            </div>
          </div>
        ))}
      </Slider>
    </div>
  );
};

export default PopupSlider;

```

components\PrivateRoute.js
```
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const PrivateRoute = ({ children, adminOnly = false }) => {
  const { user, loading } = useAuth();

  if (loading) {
    return <div>Loading...</div>;
  }

  if (!user) {
    return <Navigate to="/login" replace />;
  }

  if (adminOnly && !user.isAdmin) {
    return <Navigate to="/" replace />;
  }

  return children;
};

export default PrivateRoute;

```

components\SearchBar.js
```
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

const SearchBar = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const navigate = useNavigate();

  const handleSearch = (e) => {
    e.preventDefault();
    navigate(`/search?q=${searchTerm}`);
  };

  return (
    <form onSubmit={handleSearch} className="search-bar">
      <input
        type="text"
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        placeholder="팝업스토어 검색..."
        className="search-input"
      />
      <button type="submit" className="search-button">검색</button>
    </form>
  );
};

export default SearchBar;

```

context\AuthContext.js
```
import React, { createContext, useState, useContext, useEffect } from 'react';
import { getUserInfo, isAuthenticated } from '../services/auth';

const AuthContext = createContext();

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadUser = async () => {
      if (isAuthenticated()) {
        try {
          const userData = await getUserInfo();
          setUser(userData);
        } catch (error) {
          console.error('Failed to load user:', error);
        }
      }
      setLoading(false);
    };
    loadUser();
  }, []);

  const value = {
    user,
    setUser,
    loading,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};


```

pages\AdminPage.js
```
import React, { useState } from 'react';
import { createPopup } from '../services/api';

const AdminPage = () => {
  const [popupName, setPopupName] = useState('');
  const [address, setAddress] = useState('');
  const [operatingHours, setOperatingHours] = useState('');
  const [period, setPeriod] = useState('');
  const [description, setDescription] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await createPopup({ popupName, address, operatingHours, period, description });
      // 팝업 생성 성공 후 처리 (예: 성공 메시지 표시, 폼 초기화)
    } catch (error) {
      console.error('팝업 생성 실패:', error);
      // 에러 처리 (예: 에러 메시지 표시)
    }
  };

  return (
    <div className="admin-page">
      <h2>관리자 페이지 - 팝업 생성</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          value={popupName}
          onChange={(e) => setPopupName(e.target.value)}
          placeholder="팝업명"
          required
        />
        <input
          type="text"
          value={address}
          onChange={(e) => setAddress(e.target.value)}
          placeholder="주소"
          required
        />
        <input
          type="text"
          value={operatingHours}
          onChange={(e) => setOperatingHours(e.target.value)}
          placeholder="운영 시간"
          required
        />
        <input
          type="text"
          value={period}
          onChange={(e) => setPeriod(e.target.value)}
          placeholder="기간 (예: 2024-09-17 ~ 2024-10-05)"
          required
        />
        <textarea
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          placeholder="팝업 소개"
          maxLength={200}
        />
        <button type="submit">팝업 생성</button>
      </form>
    </div>
  );
};

export default AdminPage;


```

pages\FavoritePopupsPage.js
```
import React, { useState, useEffect } from 'react';
import PopupCard from '../components/PopupCard';
import { getFavoritePopups } from '../services/api';

const FavoritePopupsPage = () => {
  const [favoritePopups, setFavoritePopups] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchFavoritePopups = async () => {
      setLoading(true);
      const favorites = await getFavoritePopups();
      setFavoritePopups(favorites);
      setLoading(false);
    };
    fetchFavoritePopups();
  }, []);

  if (loading) return <div>로딩 중...</div>;

  return (
    <div className="favorite-popups-page">
      <h2>관심 팝업</h2>
      {favoritePopups.length === 0 ? (
        <p>관심 팝업이 없습니다.</p>
      ) : (
        <div className="popup-grid">
          {favoritePopups.map((popup) => (
            <PopupCard key={popup.id} popup={popup} />
          ))}
        </div>
      )}
    </div>
  );
};

export default FavoritePopupsPage;


```

pages\LoginPage.js
```
import React, { useState } from 'react';
import { login } from '../services/auth';

const LoginPage = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await login(username, password);
      // 로그인 성공 후 처리 (예: 메인 페이지로 리다이렉트)
    } catch (error) {
      console.error('로그인 실패:', error);
      // 에러 처리 (예: 에러 메시지 표시)
    }
  };

  return (
    <div className="login-page">
      <h2>로그인</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          placeholder="아이디"
          required
        />
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          placeholder="비밀번호"
          required
        />
        <button type="submit">로그인</button>
      </form>
      <button onClick={() => {/* 카카오 로그인 처리 */}}>
        카카오로 로그인
      </button>
    </div>
  );
};

export default LoginPage;


```

pages\MainPage.js
```
import React, { useState, useEffect } from 'react';
import PopupSlider from '../components/PopupSlider';
import PopupCard from '../components/PopupCard';
import { getPopularPopups, getAllPopups } from '../services/api';

const MainPage = () => {
  const [popularPopups, setPopularPopups] = useState([]);
  const [allPopups, setAllPopups] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchPopups = async () => {
      try {
        setLoading(true);
        const popularData = await getPopularPopups();
        const allData = await getAllPopups();
        setPopularPopups(popularData.data || []);
        setAllPopups(allData.data || []);
        setError(null);
      } catch (err) {
        console.error("팝업 데이터를 불러오는 데 실패했습니다:", err);
        setError("데이터를 불러오는 데 실패했습니다. 다시 시도해 주세요.");
      } finally {
        setLoading(false);
      }
    };
    fetchPopups();
  }, []);

  if (loading) return <div>로딩 중...</div>;
  if (error) return <div>{error}</div>;

  return (
    <div className="main-page">
      {popularPopups.length > 0 && <PopupSlider popups={popularPopups} />}
      <h2>모든 팝업스토어</h2>
      <div className="popup-grid">
        {allPopups.length > 0 ? (
          allPopups.map((popup) => (
            <PopupCard key={popup.id} popup={popup} />
          ))
        ) : (
          <p>표시할 팝업 스토어가 없습니다.</p>
        )}
      </div>
    </div>
  );
};

export default MainPage;

```

pages\MyPage.js
```
import React, { useState, useEffect } from 'react';
import { getUserInfo, logout } from '../services/auth';

const MyPage = () => {
  const [userInfo, setUserInfo] = useState(null);

  useEffect(() => {
    const fetchUserInfo = async () => {
      const info = await getUserInfo();
      setUserInfo(info);
    };
    fetchUserInfo();
  }, []);

  const handleLogout = async () => {
    await logout();
    // 로그아웃 후 처리 (예: 메인 페이지로 리다이렉트)
  };

  if (!userInfo) return <div>로딩 중...</div>;

  return (
    <div className="my-page">
      <h2>내 정보</h2>
      <p>이름: {userInfo.name}</p>
      <p>이메일: {userInfo.email}</p>
      <button onClick={handleLogout}>로그아웃</button>
      <button onClick={() => {/* 회원 탈퇴 처리 */}}>회원 탈퇴</button>
    </div>
  );
};

export default MyPage;


```

pages\PopupDetailPage.js
```
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getPopupDetails } from '../services/api';

const PopupDetailPage = () => {
  const [popup, setPopup] = useState(null);
  const [loading, setLoading] = useState(true);
  const { id } = useParams();

  useEffect(() => {
    const fetchPopupDetails = async () => {
      setLoading(true);
      const details = await getPopupDetails(id);
      setPopup(details);
      setLoading(false);
    };
    fetchPopupDetails();
  }, [id]);

  if (loading) return <div>로딩 중...</div>;
  if (!popup) return <div>팝업 정보를 찾을 수 없습니다.</div>;

  return (
    <div className="popup-detail-page">
      <h2>{popup.title}</h2>
      <img src={popup.image} alt={popup.title} />
      <p>주소: {popup.address}</p>
      <p>기간: {popup.date}</p>
      <p>운영 시간: {popup.operatingHours}</p>
      <div className="popup-description">{popup.description}</div>
      {/* 여기에 지도 컴포넌트를 추가할 수 있습니다 */}
      {/* 여기에 리뷰 섹션을 추가할 수 있습니다 */}
    </div>
  );
};

export default PopupDetailPage;


```

pages\PopupReportPage.js
```
import React, { useState } from 'react';
import { reportPopup } from '../services/api';

const PopupReportPage = () => {
  const [popupName, setPopupName] = useState('');
  const [brandName, setBrandName] = useState('');
  const [address, setAddress] = useState('');
  const [period, setPeriod] = useState('');
  const [description, setDescription] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await reportPopup({ popupName, brandName, address, period, description });
      // 제보 성공 후 처리 (예: 성공 메시지 표시, 메인 페이지로 리다이렉트)
    } catch (error) {
      console.error('팝업 제보 실패:', error);
      // 에러 처리 (예: 에러 메시지 표시)
    }
  };

  return (
    <div className="popup-report-page">
      <h2>팝업 제보하기</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          value={popupName}
          onChange={(e) => setPopupName(e.target.value)}
          placeholder="팝업명"
          required
        />
        <input
          type="text"
          value={brandName}
          onChange={(e) => setBrandName(e.target.value)}
          placeholder="브랜드명"
          required
        />
        <input
          type="text"
          value={address}
          onChange={(e) => setAddress(e.target.value)}
          placeholder="주소"
          required
        />
        <input
          type="text"
          value={period}
          onChange={(e) => setPeriod(e.target.value)}
          placeholder="기간 (예: 2024-09-17 ~ 2024-10-05)"
          required
        />
        <textarea
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          placeholder="세부 내용"
          maxLength={200}
        />
        <button type="submit">제보하기</button>
      </form>
    </div>
  );
};

export default PopupReportPage;


```

pages\SearchResultPage.js
```
import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import PopupCard from '../components/PopupCard';
import { searchPopups } from '../services/api';

const SearchResultPage = () => {
  const [searchResults, setSearchResults] = useState([]);
  const [loading, setLoading] = useState(true);
  const location = useLocation();
  const searchQuery = new URLSearchParams(location.search).get('q');

  useEffect(() => {
    const fetchSearchResults = async () => {
      setLoading(true);
      const results = await searchPopups(searchQuery);
      setSearchResults(results);
      setLoading(false);
    };
    fetchSearchResults();
  }, [searchQuery]);

  if (loading) return <div>검색 중...</div>;

  return (
    <div className="search-result-page">
      <h2>"{searchQuery}" 검색 결과</h2>
      {searchResults.length === 0 ? (
        <p>검색 결과가 없습니다.</p>
      ) : (
        <div className="popup-grid">
          {searchResults.map((popup) => (
            <PopupCard key={popup.id} popup={popup} />
          ))}
        </div>
      )}
    </div>
  );
};

export default SearchResultPage;


```

services\api.js
```
import axios from 'axios';

const API_BASE_URL = 'https://api.popupzone.com'; // 실제 API 주소로 변경해야 합니다

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

const mockPopups = [
  { id: 1, title: "팝업 1", location: "서울", date: "2023-06-01 ~ 2023-06-30", image: "/images/popup1.jpg" },
  { id: 2, title: "팝업 2", location: "부산", date: "2023-07-01 ~ 2023-07-31", image: "/images/popup2.jpg" },
];

export const getPopularPopups = async () => {
  // return await api.get('/popups/popular');
  return Promise.resolve({ data: mockPopups });
};

export const getAllPopups = async () => {
  // return await api.get('/popups');
  return Promise.resolve({ data: mockPopups });
};

export const searchPopups = async (query) => {
  const response = await api.get(`/popups/search?q=${query}`);
  return response.data;
};

export const getPopupDetails = async (id) => {
  const response = await api.get(`/popups/${id}`);
  return response.data;
};

export const getFavoritePopups = async () => {
  const response = await api.get('/popups/favorites');
  return response.data;
};

export const reportPopup = async (popupData) => {
  const response = await api.post('/popups/report', popupData);
  return response.data;
};

export const createPopup = async (popupData) => {
  const response = await api.post('/popups', popupData);
  return response.data;
};

export default api;

```

services\auth.js
```
import api from './api';

export const login = async (username, password) => {
  const response = await api.post('/auth/login', { username, password });
  localStorage.setItem('token', response.data.token);
  return response.data;
};

export const logout = () => {
  localStorage.removeItem('token');
};

export const getUserInfo = async () => {
  const response = await api.get('/auth/user');
  return response.data;
};

export const isAuthenticated = () => {
  return !!localStorage.getItem('token');
};

api.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});


```

utils\helpers.js
```

```

